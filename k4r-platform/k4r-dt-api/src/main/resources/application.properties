spring.profiles.active=@activatedProperties@
server.servlet.context-path=/k4r
server.error.include-message=always
logging.level.org.knowledge4retail.api=DEBUG

#SQL Logger
logging.level.org.hibernate.SQL=DEBUG
#logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# swagger
springdoc.swagger-ui.path=/swagger-ui.html

# disable adding Endpoint to the Servlet in GraphQL, otherwise exception is produced due to MockMvc-Servlet
spring.autoconfigure.exclude=graphql.kickstart.spring.web.boot.GraphQLWebsocketAutoConfiguration

# GraphQL Setting
graphql.servlet.exception-handlers-enabled=true
graphql.mapping= /graphql

# Settings to enable GraphiQL
graphiql.enabled= true
graphiql.basePath= /
graphiql.mapping= /graphiql
graphiql.endpoint.graphql= /graphql
graphiql.pageTitle= GraphiQl

# Settings to enable GraphQL Playground (Context-path has to be removed)
graphql.playground.enabled= true
graphql.playground.mapping= /playground
graphql.playground.endpoint= /graphql
graphql.playground.staticPath.base= /k4r
graphql.playground.pageTitle= Playground
graphql.playground.tabs[0].name= queryExample
graphql.playground.tabs[0].query= classpath:graphql/playground/queryExample.graphql
graphql.playground.tabs[0].variables= classpath:graphql/playground/variables.json
graphql.playground.tabs[0].headers.userId= DT_USER
graphql.playground.tabs[1].name= queryExampleWithFiltering
graphql.playground.tabs[1].query= classpath:graphql/playground/queryExampleWithFiltering.graphql

# Settings to enable GraphQL Voyager
voyager.enabled= true
voyager.basePath= /k4r/
voyager.mapping= /voyager
voyager.endpoint= /graphql
voyager.pageTitle= Voyager
voyager.displayOptions.rootType= QueryResolver



org.knowledge4retail.api.listener.kafka.topics.basketposition=${BASKETPOSITION_TOPIC:k4r.dt.basketPosition}
org.knowledge4retail.api.listener.kafka.topics.productcharacteristic=${PRODUCTCHARACTERISTIC_TOPIC:k4r.dt.productCharacteristic}
org.knowledge4retail.api.listener.kafka.topics.storecharacteristic=${STORECHARACTERISTIC_TOPIC:k4r.dt.storeCharacteristic}
org.knowledge4retail.api.listener.kafka.topics.customer=${CUSTOMER_TOPIC:k4r.dt.customer}
org.knowledge4retail.api.listener.kafka.topics.deviceimage=${DEVICEIMAGE_TOPIC:k4r.dt.robot.deviceImage}
org.knowledge4retail.api.listener.kafka.topics.devicestatus=${ROBOT_POSE_TOPIC:k4r.dt.robot.pose}
org.knowledge4retail.api.listener.kafka.topics.facing=${FACING_TOPIC:k4r.dt.facing}
org.knowledge4retail.api.listener.kafka.topics.map2d=${MAP2D_TOPIC:k4r.dt.robot.map2d}
org.knowledge4retail.api.listener.kafka.topics.planogram=${PLANOGRAM_TOPIC:k4r.dt.planogram}
org.knowledge4retail.api.listener.kafka.topics.wireframe=${WIREFRAME_TOPIC:k4r.dt.wireframe}
org.knowledge4retail.api.listener.kafka.topics.product=${PRODUCT_TOPIC:k4r.dt.product}
org.knowledge4retail.api.listener.kafka.topics.productgroup=${PRODUCTGROUP_TOPIC:k4r.dt.productGroup}
org.knowledge4retail.api.listener.kafka.topics.storeproperty=${STOREPROPERTY_TOPIC:k4r.dt.storeProperty}
org.knowledge4retail.api.listener.kafka.topics.productproperty=${PRODUCTPROPERTY_TOPIC:k4r.dt.productProperty}
org.knowledge4retail.api.listener.kafka.topics.shelf=${SHELF_TOPIC:k4r.dt.shelf}
org.knowledge4retail.api.listener.kafka.topics.shelflayer=${SHELFLAYER_TOPIC:k4r.dt.shelfLayer}
org.knowledge4retail.api.listener.kafka.topics.store=${STORE_TOPIC:k4r.dt.store}
org.knowledge4retail.api.listener.kafka.topics.materialgroup=${MATERIALGROUP_TOPIC:k4r.dt.materialGroup}
org.knowledge4retail.api.listener.kafka.topics.productunit=${PRODUCTUNIT_TOPIC:k4r.dt.productUnit}
org.knowledge4retail.api.listener.kafka.topics.productgtin=${PRODUCTGTIN_TOPIC:k4r.dt.productGtin}
org.knowledge4retail.api.listener.kafka.topics.despatchadvice=${DESPATCHADVICE_TOPIC:k4r.dt.despatchAdvice}
org.knowledge4retail.api.listener.kafka.topics.item=${ITEM_TOPIC:k4r.dt.item}
org.knowledge4retail.api.listener.kafka.topics.device=${DEVICE_TOPIC:k4r.dt.device}
org.knowledge4retail.api.listener.kafka.topics.storeobject=${STOREOBJECT_TOPIC:k4r.dt.storeObject}
org.knowledge4retail.api.listener.kafka.topics.despatchlogisticunit=${DESPATCHLOGISTICUNIT_TOPIC:k4r.dt.despatchLogisticUnit}
org.knowledge4retail.api.listener.kafka.topics.despatchlineitem=${DESPATCHLINEITEM_TOPIC:k4r.dt.despatchLineItem}
org.knowledge4retail.api.listener.kafka.topics.productdescription=${PRODUCTDESCRIPTION_TOPIC:k4r.dt.productDescription}
org.knowledge4retail.api.listener.kafka.topics.unit=${UNIT_TOPIC:k4r.dt.unit}
org.knowledge4retail.api.listener.kafka.topics.trolley=${TROLLEY_TOPIC:k4r.dt.trolley}
org.knowledge4retail.api.listener.kafka.topics.deliveredunit=${DELIVEREDITEM_TOPIC:k4r.dt.deliveredUnit}
org.knowledge4retail.api.listener.kafka.topics.scan=${SCAN_TOPIC:k4r.dt.scan}
org.knowledge4retail.api.listener.kafka.topics.sales=${SCAN_TOPIC:k4r.dt.sales}
org.knowledge4retail.api.listener.kafka.topics.ubicascan=${UBICASCAN_TOPIC:k4r.dt.ubicaScan}
org.knowledge4retail.api.listener.kafka.topics.barcode=${BARCODE_TOPIC:k4r.dt.barcode}
org.knowledge4retail.api.listener.kafka.topics.trolleyroute=${TROLLEY_ROUTE_TOPIC:k4r.dt.trolleyRoute}

### Increase default allowed size for uploaded files from 128 KB!
spring.servlet.multipart.max-file-size=50MB
spring.servlet.multipart.max-request-size=50MB

## Enable Spring Metrics
management.endpoints.web.exposure.include=health,info,prometheus,metrics

## Enable GraphQL Metrics
graphql.servlet.actuator-metrics=true
## Set Application Name
management.metrics.tags.application=${APPLICATION_NAME:k4r-dt-api}
## enable lazy loading without transactional
spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true